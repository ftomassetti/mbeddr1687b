package Issue1687.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.mpsutil.grammarcells.runtime.CellActionWithReadAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.EditorManager;
import com.mbeddr.mpsutil.grammarcells.runtime.GrammarCellsUtil;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class InRangeExpression_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_h16em6_a(editorContext, node);
  }
  private EditorCell createCollection_h16em6_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_h16em6_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createRefNode_h16em6_a0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_b0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_c0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_d0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_e0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_f0(editorContext, node));
    editorCell.addEditorCell(this.createCustomFactory_h16em6_g0(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNode_h16em6_a0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new InRangeExpression_Editor.valueSingleRoleHandler_h16em6_a0(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"), editorContext);
    return provider.createCell();
  }
  private class valueSingleRoleHandler_h16em6_a0 extends SingleRoleCellProvider {
    public valueSingleRoleHandler_h16em6_a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("value");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_value");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no value>";
    }
  }
  private EditorCell createCustomFactory_h16em6_b0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_h16em6_a1a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createConstant_h16em6_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "in");
    editorCell.setCellId("Constant_h16em6_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustomFactory_h16em6_c0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createProperty_h16em6_a2a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createProperty_h16em6_a2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("leftInclusive");
    provider.setNoTargetText("<no leftInclusive>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_leftInclusive");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCustomFactory_h16em6_d0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createRefNode_h16em6_a3a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {
            {
              // replace with placeholder 
              SNode child = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"));
              SAbstractConcept childConcept = SNodeOperations.getConcept(child);
              if (!(GrammarCellsUtil.isExactly(childConcept, MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")))) {
                SNodeFactoryOperations.setNewChild(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")));
                return;
              }
            }

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {
            {
              // replace with placeholder 
              SNode child = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"));
              SAbstractConcept childConcept = SNodeOperations.getConcept(child);
              if (!(GrammarCellsUtil.isExactly(childConcept, MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")))) {
                SNodeFactoryOperations.setNewChild(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")));
                return;
              }
            }

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createRefNode_h16em6_a3a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new InRangeExpression_Editor.lowLimitSingleRoleHandler_h16em6_a3a(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), editorContext);
    return provider.createCell();
  }
  private class lowLimitSingleRoleHandler_h16em6_a3a extends SingleRoleCellProvider {
    public lowLimitSingleRoleHandler_h16em6_a3a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("lowLimit");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd42L, "lowLimit")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_lowLimit");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no lowLimit>";
    }
  }
  private EditorCell createCustomFactory_h16em6_e0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_h16em6_a4a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createConstant_h16em6_a4a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "..");
    editorCell.setCellId("Constant_h16em6_a4a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustomFactory_h16em6_f0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createRefNode_h16em6_a5a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {
            {
              // replace with placeholder 
              SNode child = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"));
              SAbstractConcept childConcept = SNodeOperations.getConcept(child);
              if (!(GrammarCellsUtil.isExactly(childConcept, MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")))) {
                SNodeFactoryOperations.setNewChild(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")));
                return;
              }
            }

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {
            {
              // replace with placeholder 
              SNode child = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"));
              SAbstractConcept childConcept = SNodeOperations.getConcept(child);
              if (!(GrammarCellsUtil.isExactly(childConcept, MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")))) {
                SNodeFactoryOperations.setNewChild(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcfaa4966b7d54b69L, 0xb66a309a6e1a7290L, 0x670d5e92f854a047L, "org.iets3.core.expr.base.structure.Expression")));
                return;
              }
            }

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createRefNode_h16em6_a5a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new InRangeExpression_Editor.highLimitSingleRoleHandler_h16em6_a5a(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), editorContext);
    return provider.createCell();
  }
  private class highLimitSingleRoleHandler_h16em6_a5a extends SingleRoleCellProvider {
    public highLimitSingleRoleHandler_h16em6_a5a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("highLimit");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd47L, "highLimit")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_highLimit");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no highLimit>";
    }
  }
  private EditorCell createCustomFactory_h16em6_g0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createProperty_h16em6_a6a(editorContext, node);
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1707e44579784fc0L, 0x955f614507f5e1bbL, 0x3253b071a8681340L, 0x45f6793ede6dd4dL, "value"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createProperty_h16em6_a6a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("rightInclusive");
    provider.setNoTargetText("<no rightInclusive>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_rightInclusive");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    style.set(StyleAttributes.FIRST_POSITION_ALLOWED, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
}
