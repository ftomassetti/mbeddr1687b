package Issue1687.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum LimitInclusivenessLeft {
  LEFT_EXCLUSIVE("]", false),
  LEFT_INCLUSIVE("[", true);

  private final String myName;
  public String getName() {
    return myName;
  }
  private final boolean myValue;
  LimitInclusivenessLeft(String name, boolean value) {
    myName = name;
    myValue = value;
  }
  public boolean getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return Boolean.toString(myValue);
  }
  public static List<LimitInclusivenessLeft> getConstants() {
    List<LimitInclusivenessLeft> list = ListSequence.fromList(new LinkedList<LimitInclusivenessLeft>());
    ListSequence.fromList(list).addElement(LimitInclusivenessLeft.LEFT_EXCLUSIVE);
    ListSequence.fromList(list).addElement(LimitInclusivenessLeft.LEFT_INCLUSIVE);
    return list;
  }
  public static LimitInclusivenessLeft getDefault() {
    return LimitInclusivenessLeft.LEFT_INCLUSIVE;
  }
  public static LimitInclusivenessLeft parseValue(String value) {
    if (value == null) {
      return LimitInclusivenessLeft.getDefault();
    }
    if (value.equals(LimitInclusivenessLeft.LEFT_EXCLUSIVE.getValueAsString())) {
      return LimitInclusivenessLeft.LEFT_EXCLUSIVE;
    }
    if (value.equals(LimitInclusivenessLeft.LEFT_INCLUSIVE.getValueAsString())) {
      return LimitInclusivenessLeft.LEFT_INCLUSIVE;
    }
    return LimitInclusivenessLeft.getDefault();
  }
}
