package Issue1687.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum LimitInclusivenessRight {
  RIGHT_EXCLUSIVE("[", false),
  RIGHT_INCLUSIVE("]", true);

  private final String myName;
  public String getName() {
    return myName;
  }
  private final boolean myValue;
  LimitInclusivenessRight(String name, boolean value) {
    myName = name;
    myValue = value;
  }
  public boolean getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return Boolean.toString(myValue);
  }
  public static List<LimitInclusivenessRight> getConstants() {
    List<LimitInclusivenessRight> list = ListSequence.fromList(new LinkedList<LimitInclusivenessRight>());
    ListSequence.fromList(list).addElement(LimitInclusivenessRight.RIGHT_EXCLUSIVE);
    ListSequence.fromList(list).addElement(LimitInclusivenessRight.RIGHT_INCLUSIVE);
    return list;
  }
  public static LimitInclusivenessRight getDefault() {
    return LimitInclusivenessRight.RIGHT_INCLUSIVE;
  }
  public static LimitInclusivenessRight parseValue(String value) {
    if (value == null) {
      return LimitInclusivenessRight.getDefault();
    }
    if (value.equals(LimitInclusivenessRight.RIGHT_EXCLUSIVE.getValueAsString())) {
      return LimitInclusivenessRight.RIGHT_EXCLUSIVE;
    }
    if (value.equals(LimitInclusivenessRight.RIGHT_INCLUSIVE.getValueAsString())) {
      return LimitInclusivenessRight.RIGHT_INCLUSIVE;
    }
    return LimitInclusivenessRight.getDefault();
  }
}
